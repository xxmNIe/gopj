// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// PeopleClient is the client API for People service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PeopleClient interface {
	SavePerson(ctx context.Context, in *SavePersonRequest, opts ...grpc.CallOption) (*SavePersonReplay, error)
	SavePersons(ctx context.Context, in *SavePersonListRequest, opts ...grpc.CallOption) (*SavePersonListReplay, error)
}

type peopleClient struct {
	cc grpc.ClientConnInterface
}

func NewPeopleClient(cc grpc.ClientConnInterface) PeopleClient {
	return &peopleClient{cc}
}

func (c *peopleClient) SavePerson(ctx context.Context, in *SavePersonRequest, opts ...grpc.CallOption) (*SavePersonReplay, error) {
	out := new(SavePersonReplay)
	err := c.cc.Invoke(ctx, "/proto.People/SavePerson", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peopleClient) SavePersons(ctx context.Context, in *SavePersonListRequest, opts ...grpc.CallOption) (*SavePersonListReplay, error) {
	out := new(SavePersonListReplay)
	err := c.cc.Invoke(ctx, "/proto.People/SavePersons", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PeopleServer is the server API for People service.
// All implementations must embed UnimplementedPeopleServer
// for forward compatibility
type PeopleServer interface {
	SavePerson(context.Context, *SavePersonRequest) (*SavePersonReplay, error)
	SavePersons(context.Context, *SavePersonListRequest) (*SavePersonListReplay, error)
	mustEmbedUnimplementedPeopleServer()
}

// UnimplementedPeopleServer must be embedded to have forward compatible implementations.
type UnimplementedPeopleServer struct {
}

func (UnimplementedPeopleServer) SavePerson(context.Context, *SavePersonRequest) (*SavePersonReplay, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SavePerson not implemented")
}
func (UnimplementedPeopleServer) SavePersons(context.Context, *SavePersonListRequest) (*SavePersonListReplay, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SavePersons not implemented")
}
func (UnimplementedPeopleServer) mustEmbedUnimplementedPeopleServer() {}

// UnsafePeopleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PeopleServer will
// result in compilation errors.
type UnsafePeopleServer interface {
	mustEmbedUnimplementedPeopleServer()
}

func RegisterPeopleServer(s grpc.ServiceRegistrar, srv PeopleServer) {
	s.RegisterService(&_People_serviceDesc, srv)
}

func _People_SavePerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SavePersonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeopleServer).SavePerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.People/SavePerson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeopleServer).SavePerson(ctx, req.(*SavePersonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _People_SavePersons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SavePersonListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeopleServer).SavePersons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.People/SavePersons",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeopleServer).SavePersons(ctx, req.(*SavePersonListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _People_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.People",
	HandlerType: (*PeopleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SavePerson",
			Handler:    _People_SavePerson_Handler,
		},
		{
			MethodName: "SavePersons",
			Handler:    _People_SavePersons_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/person.proto",
}
